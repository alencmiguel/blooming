import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

st.set_page_config(page_title="Blooming ‚Äî Dashboard de Capta√ß√£o", layout="wide")

st.title("üå∏ Blooming ‚Äî Dashboard de Capta√ß√£o")
st.write("Visualize cen√°rios de receita por fonte: **Doa√ß√µes**, **Parcerias/Patroc√≠nios**, **Cursos/Workshops** e **Monetiza√ß√£o de conte√∫do**.")

# --- Upload ---
st.sidebar.header("Dados")
up = st.sidebar.file_uploader("Envie a planilha de cen√°rios (.xlsx)", type=["xlsx"])
default_path = "blooming_dashboard_example.xlsx"

@st.cache_data
def load_sheet(file):
    # L√™ sem header e cria colunas gen√©ricas (C1, C2, C3...)
    df = pd.read_excel(file, sheet_name="Cen√°rios", header=None)
    df.columns = ["Label"] + [f"C{i}" for i in range(1, df.shape[1])]
    return df

def get_value(df, label, col):
    rows = df[df["Label"] == label]
    if rows.empty:
        return None
    v = rows.iloc[0][col]
    try:
        return float(v)
    except Exception:
        return None

# Carrega dados
if up is not None:
    df = load_sheet(up)
    source_name = "Arquivo enviado"
else:
    try:
        df = load_sheet(default_path)
        source_name = "Exemplo inclu√≠do"
    except Exception:
        st.error("N√£o encontrei a planilha. Envie o arquivo .xlsx na barra lateral.")
        st.stop()

st.caption(f"Fonte dos dados: **{source_name}** (aba 'Cen√°rios')")

# Mapeia colunas para cen√°rios
scen_cols = {"Pessimista":"C1", "Realista":"C2", "Otimista":"C3"}

# R√≥tulos (como est√£o na planilha v2_fix)
L = {
    "period" : "Per√≠odo (meses)",
    "pf_reach" : "PF ‚Äî Alcance (pessoas)",
    "pf_conv"  : "PF ‚Äî Convers√£o (%)",
    "pf_ticket": "PF ‚Äî Ticket m√©dio (R$)",
    "co_reach" : "Empresas ‚Äî Alcance (empresas)",
    "co_conv"  : "Empresas ‚Äî Convers√£o (%)",
    "co_ticket": "Empresas ‚Äî Ticket m√©dio (R$)",
    "par_qtd"  : "Parcerias ativas no m√™s (qtde)",
    "par_val"  : "Valor mensal por parceria (R$)",
    "wk_ev"    : "Eventos por m√™s (qtde)",
    "wk_ppl"   : "Participantes por evento",
    "wk_price" : "Pre√ßo por participante (R$)",
    "mon_views": "Views por m√™s",
    "mon_rpm"  : "RPM (R$ por 1.000 views)"
}

# Monta tabela resultado
records = []
for scen, col in scen_cols.items():
    period = get_value(df, L["period"], col) or 1

    pf = (get_value(df, L["pf_reach"], col) or 0) * (get_value(df, L["pf_conv"], col) or 0) * (get_value(df, L["pf_ticket"], col) or 0)
    co = (get_value(df, L["co_reach"], col) or 0) * (get_value(df, L["co_conv"], col) or 0) * (get_value(df, L["co_ticket"], col) or 0)
    par = (get_value(df, L["par_qtd"], col) or 0) * (get_value(df, L["par_val"], col) or 0)
    wk = (get_value(df, L["wk_ev"], col) or 0) * (get_value(df, L["wk_ppl"], col) or 0) * (get_value(df, L["wk_price"], col) or 0)
    mon = ((get_value(df, L["mon_views"], col) or 0) / 1000.0) * (get_value(df, L["mon_rpm"], col) or 0)

    total_month = pf + co + par + wk + mon
    total_period = total_month * period

    records.append({
        "Cen√°rio": scen,
        "Per√≠odo (meses)": period,
        "Doa√ß√µes (PF)": pf,
        "Doa√ß√µes (Empresas)": co,
        "Parcerias/Patroc√≠nios": par,
        "Cursos/Workshops": wk,
        "Monetiza√ß√£o": mon,
        "Total por m√™s": total_month,
        "Total no per√≠odo": total_period,
    })

res = pd.DataFrame.from_records(records).set_index("Cen√°rio")

# KPIs
c1, c2, c3 = st.columns(3)
c1.metric("Pessimista ‚Äî total/m√™s", f"R$ {res.loc['Pessimista','Total por m√™s']:,.2f}")
c2.metric("Realista ‚Äî total/m√™s", f"R$ {res.loc['Realista','Total por m√™s']:,.2f}")
c3.metric("Otimista ‚Äî total/m√™s", f"R$ {res.loc['Otimista','Total por m√™s']:,.2f}")

st.divider()
st.subheader("Quebra por fontes (R$ por m√™s)")
monthly_sources = res[["Doa√ß√µes (PF)", "Doa√ß√µes (Empresas)", "Parcerias/Patroc√≠nios", "Cursos/Workshops", "Monetiza√ß√£o"]]

# Gr√°fico 1 ‚Äî total por m√™s por cen√°rio
st.write("**Total por m√™s por cen√°rio**")
fig1, ax1 = plt.subplots()
ax1.bar(res.index, res["Total por m√™s"])
ax1.set_ylabel("R$ / m√™s")
st.pyplot(fig1)

# Gr√°fico 2 ‚Äî composi√ß√£o empilhada por fonte
st.write("**Composi√ß√£o por fontes (stacked)**")
fig2, ax2 = plt.subplots()
bottom = None
for col in monthly_sources.columns:
    if bottom is None:
        ax2.bar(monthly_sources.index, monthly_sources[col], label=col)
        bottom = monthly_sources[col].values
    else:
        ax2.bar(monthly_sources.index, monthly_sources[col], bottom=bottom, label=col)
        bottom = bottom + monthly_sources[col].values
ax2.set_ylabel("R$ / m√™s")
ax2.legend()
st.pyplot(fig2)

st.divider()
st.subheader("Tabela de resultados")
st.dataframe(res.style.format("R$ {:,.2f}", subset=res.columns))

st.caption("Dica: altere os n√∫meros na planilha e recarregue para ver o impacto nos gr√°ficos.")
